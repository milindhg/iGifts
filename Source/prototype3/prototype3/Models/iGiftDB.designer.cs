#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4918
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace prototype3.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="iGifts")]
	public partial class iGiftDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertConnection(Connection instance);
    partial void UpdateConnection(Connection instance);
    partial void DeleteConnection(Connection instance);
    partial void InsertWishlist(Wishlist instance);
    partial void UpdateWishlist(Wishlist instance);
    partial void DeleteWishlist(Wishlist instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertFeedback(Feedback instance);
    partial void UpdateFeedback(Feedback instance);
    partial void DeleteFeedback(Feedback instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertShoppingItem(ShoppingItem instance);
    partial void UpdateShoppingItem(ShoppingItem instance);
    partial void DeleteShoppingItem(ShoppingItem instance);
    partial void InsertShoppingTransaction(ShoppingTransaction instance);
    partial void UpdateShoppingTransaction(ShoppingTransaction instance);
    partial void DeleteShoppingTransaction(ShoppingTransaction instance);
    partial void InsertScrapBook(ScrapBook instance);
    partial void UpdateScrapBook(ScrapBook instance);
    partial void DeleteScrapBook(ScrapBook instance);
    partial void InsertOnlineUser(OnlineUser instance);
    partial void UpdateOnlineUser(OnlineUser instance);
    partial void DeleteOnlineUser(OnlineUser instance);
    #endregion
		
		public iGiftDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["iGiftsConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public iGiftDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public iGiftDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public iGiftDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public iGiftDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Connection> Connections
		{
			get
			{
				return this.GetTable<Connection>();
			}
		}
		
		public System.Data.Linq.Table<Wishlist> Wishlists
		{
			get
			{
				return this.GetTable<Wishlist>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Feedback> Feedbacks
		{
			get
			{
				return this.GetTable<Feedback>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ShoppingItem> ShoppingItems
		{
			get
			{
				return this.GetTable<ShoppingItem>();
			}
		}
		
		public System.Data.Linq.Table<ShoppingTransaction> ShoppingTransactions
		{
			get
			{
				return this.GetTable<ShoppingTransaction>();
			}
		}
		
		public System.Data.Linq.Table<ScrapBook> ScrapBooks
		{
			get
			{
				return this.GetTable<ScrapBook>();
			}
		}
		
		public System.Data.Linq.Table<OnlineUser> OnlineUsers
		{
			get
			{
				return this.GetTable<OnlineUser>();
			}
		}
	}
	
	[Table(Name="dbo.Connections")]
	public partial class Connection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _CID;
		
		private System.Nullable<long> _UserID;
		
		private System.Nullable<long> _FID;
		
		private System.Nullable<byte> _ReqConfirm;
		
		private System.Nullable<double> _CreditsGifted;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntityRef<User> _user;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(long value);
    partial void OnCIDChanged();
    partial void OnUserIDChanging(System.Nullable<long> value);
    partial void OnUserIDChanged();
    partial void OnFIDChanging(System.Nullable<long> value);
    partial void OnFIDChanged();
    partial void OnReqConfirmChanging(System.Nullable<byte> value);
    partial void OnReqConfirmChanged();
    partial void OnCreditsGiftedChanging(System.Nullable<double> value);
    partial void OnCreditsGiftedChanged();
    #endregion
		
		public Connection()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._user = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_CID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt")]
		public System.Nullable<long> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_FID", DbType="BigInt")]
		public System.Nullable<long> FID
		{
			get
			{
				return this._FID;
			}
			set
			{
				if ((this._FID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFIDChanging(value);
					this.SendPropertyChanging();
					this._FID = value;
					this.SendPropertyChanged("FID");
					this.OnFIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReqConfirm", DbType="TinyInt")]
		public System.Nullable<byte> ReqConfirm
		{
			get
			{
				return this._ReqConfirm;
			}
			set
			{
				if ((this._ReqConfirm != value))
				{
					this.OnReqConfirmChanging(value);
					this.SendPropertyChanging();
					this._ReqConfirm = value;
					this.SendPropertyChanged("ReqConfirm");
					this.OnReqConfirmChanged();
				}
			}
		}
		
		[Column(Storage="_CreditsGifted", DbType="Float")]
		public System.Nullable<double> CreditsGifted
		{
			get
			{
				return this._CreditsGifted;
			}
			set
			{
				if ((this._CreditsGifted != value))
				{
					this.OnCreditsGiftedChanging(value);
					this.SendPropertyChanging();
					this._CreditsGifted = value;
					this.SendPropertyChanged("CreditsGifted");
					this.OnCreditsGiftedChanged();
				}
			}
		}
		
		[Association(Name="Connection_Transaction", Storage="_Transactions", ThisKey="CID", OtherKey="CID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[Association(Name="User_Connection", Storage="_user", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				User previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.Connections.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.Connections.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<long>);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		[Association(Name="User_Connection1", Storage="_User1", ThisKey="FID", OtherKey="UserID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Connections1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Connections1.Add(this);
						this._FID = value.UserID;
					}
					else
					{
						this._FID = default(Nullable<long>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Connection = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Connection = null;
		}
	}
	
	[Table(Name="dbo.Wishlists")]
	public partial class Wishlist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _WID;
		
		private long _UserID;
		
		private string _WishItem;
		
		private System.Nullable<int> _Preference;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWIDChanging(long value);
    partial void OnWIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnWishItemChanging(string value);
    partial void OnWishItemChanged();
    partial void OnPreferenceChanging(System.Nullable<int> value);
    partial void OnPreferenceChanged();
    #endregion
		
		public Wishlist()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_WID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long WID
		{
			get
			{
				return this._WID;
			}
			set
			{
				if ((this._WID != value))
				{
					this.OnWIDChanging(value);
					this.SendPropertyChanging();
					this._WID = value;
					this.SendPropertyChanged("WID");
					this.OnWIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_WishItem", DbType="NVarChar(256)")]
		public string WishItem
		{
			get
			{
				return this._WishItem;
			}
			set
			{
				if ((this._WishItem != value))
				{
					this.OnWishItemChanging(value);
					this.SendPropertyChanging();
					this._WishItem = value;
					this.SendPropertyChanged("WishItem");
					this.OnWishItemChanged();
				}
			}
		}
		
		[Column(Storage="_Preference", DbType="Int")]
		public System.Nullable<int> Preference
		{
			get
			{
				return this._Preference;
			}
			set
			{
				if ((this._Preference != value))
				{
					this.OnPreferenceChanging(value);
					this.SendPropertyChanging();
					this._Preference = value;
					this.SendPropertyChanged("Preference");
					this.OnPreferenceChanged();
				}
			}
		}
		
		[Association(Name="User_Wishlist", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Wishlists.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Wishlists.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EventID;
		
		private long _UserID;
		
		private string _EventName;
		
		private System.Nullable<System.DateTime> _EventDate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnEventNameChanging(string value);
    partial void OnEventNameChanged();
    partial void OnEventDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEventDateChanged();
    #endregion
		
		public Event()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventName", DbType="NVarChar(100)")]
		public string EventName
		{
			get
			{
				return this._EventName;
			}
			set
			{
				if ((this._EventName != value))
				{
					this.OnEventNameChanging(value);
					this.SendPropertyChanging();
					this._EventName = value;
					this.SendPropertyChanged("EventName");
					this.OnEventNameChanged();
				}
			}
		}
		
		[Column(Storage="_EventDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EventDate
		{
			get
			{
				return this._EventDate;
			}
			set
			{
				if ((this._EventDate != value))
				{
					this.OnEventDateChanging(value);
					this.SendPropertyChanging();
					this._EventDate = value;
					this.SendPropertyChanged("EventDate");
					this.OnEventDateChanged();
				}
			}
		}
		
		[Association(Name="User_Event", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Feedbacks")]
	public partial class Feedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _FeedbackID;
		
		private string _FeedbackText;
		
		private string _FeedbackEmail;
		
		private string _FeedbackName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeedbackIDChanging(long value);
    partial void OnFeedbackIDChanged();
    partial void OnFeedbackTextChanging(string value);
    partial void OnFeedbackTextChanged();
    partial void OnFeedbackEmailChanging(string value);
    partial void OnFeedbackEmailChanged();
    partial void OnFeedbackNameChanging(string value);
    partial void OnFeedbackNameChanged();
    #endregion
		
		public Feedback()
		{
			OnCreated();
		}
		
		[Column(Storage="_FeedbackID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long FeedbackID
		{
			get
			{
				return this._FeedbackID;
			}
			set
			{
				if ((this._FeedbackID != value))
				{
					this.OnFeedbackIDChanging(value);
					this.SendPropertyChanging();
					this._FeedbackID = value;
					this.SendPropertyChanged("FeedbackID");
					this.OnFeedbackIDChanged();
				}
			}
		}
		
		[Column(Storage="_FeedbackText", DbType="NVarChar(512)")]
		public string FeedbackText
		{
			get
			{
				return this._FeedbackText;
			}
			set
			{
				if ((this._FeedbackText != value))
				{
					this.OnFeedbackTextChanging(value);
					this.SendPropertyChanging();
					this._FeedbackText = value;
					this.SendPropertyChanged("FeedbackText");
					this.OnFeedbackTextChanged();
				}
			}
		}
		
		[Column(Storage="_FeedbackEmail", DbType="NVarChar(100)")]
		public string FeedbackEmail
		{
			get
			{
				return this._FeedbackEmail;
			}
			set
			{
				if ((this._FeedbackEmail != value))
				{
					this.OnFeedbackEmailChanging(value);
					this.SendPropertyChanging();
					this._FeedbackEmail = value;
					this.SendPropertyChanged("FeedbackEmail");
					this.OnFeedbackEmailChanged();
				}
			}
		}
		
		[Column(Storage="_FeedbackName", DbType="NVarChar(100)")]
		public string FeedbackName
		{
			get
			{
				return this._FeedbackName;
			}
			set
			{
				if ((this._FeedbackName != value))
				{
					this.OnFeedbackNameChanging(value);
					this.SendPropertyChanging();
					this._FeedbackName = value;
					this.SendPropertyChanged("FeedbackName");
					this.OnFeedbackNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Transactions")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TID;
		
		private long _CID;
		
		private System.Nullable<double> _AmountTransfered;
		
		private System.DateTime _Timestamp;
		
		private EntityRef<Connection> _Connection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTIDChanging(long value);
    partial void OnTIDChanged();
    partial void OnCIDChanging(long value);
    partial void OnCIDChanged();
    partial void OnAmountTransferedChanging(System.Nullable<double> value);
    partial void OnAmountTransferedChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    #endregion
		
		public Transaction()
		{
			this._Connection = default(EntityRef<Connection>);
			OnCreated();
		}
		
		[Column(Storage="_TID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long TID
		{
			get
			{
				return this._TID;
			}
			set
			{
				if ((this._TID != value))
				{
					this.OnTIDChanging(value);
					this.SendPropertyChanging();
					this._TID = value;
					this.SendPropertyChanged("TID");
					this.OnTIDChanged();
				}
			}
		}
		
		[Column(Storage="_CID", DbType="BigInt NOT NULL")]
		public long CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					if (this._Connection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[Column(Storage="_AmountTransfered", DbType="Float")]
		public System.Nullable<double> AmountTransfered
		{
			get
			{
				return this._AmountTransfered;
			}
			set
			{
				if ((this._AmountTransfered != value))
				{
					this.OnAmountTransferedChanging(value);
					this.SendPropertyChanging();
					this._AmountTransfered = value;
					this.SendPropertyChanged("AmountTransfered");
					this.OnAmountTransferedChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Association(Name="Connection_Transaction", Storage="_Connection", ThisKey="CID", OtherKey="CID", IsForeignKey=true)]
		public Connection Connection
		{
			get
			{
				return this._Connection.Entity;
			}
			set
			{
				Connection previousValue = this._Connection.Entity;
				if (((previousValue != value) 
							|| (this._Connection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Connection.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Connection.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._CID = value.CID;
					}
					else
					{
						this._CID = default(long);
					}
					this.SendPropertyChanged("Connection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserID;
		
		private string _Username;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private string _EmailID;
		
		private System.DateTime _DOB;
		
		private string _Sex;
		
		private System.Nullable<double> _Credits;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private string _Country;
		
		private string _Zipcode;
		
		private string _ContactNo;
		
		private EntitySet<Connection> _Connections;
		
		private EntitySet<Connection> _Connections1;
		
		private EntitySet<Wishlist> _Wishlists;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<ShoppingTransaction> _ShoppingTransactions;
		
		private EntitySet<ShoppingTransaction> _ShoppingTransactions1;
		
		private EntitySet<ScrapBook> _ScrapBooks;
		
		private EntitySet<ScrapBook> _ScrapBooks1;
		
		private EntitySet<OnlineUser> _OnlineUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailIDChanging(string value);
    partial void OnEmailIDChanged();
    partial void OnDOBChanging(System.DateTime value);
    partial void OnDOBChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnCreditsChanging(System.Nullable<double> value);
    partial void OnCreditsChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnZipcodeChanging(string value);
    partial void OnZipcodeChanged();
    partial void OnContactNoChanging(string value);
    partial void OnContactNoChanged();
    #endregion
		
		public User()
		{
			this._Connections = new EntitySet<Connection>(new Action<Connection>(this.attach_Connections), new Action<Connection>(this.detach_Connections));
			this._Connections1 = new EntitySet<Connection>(new Action<Connection>(this.attach_Connections1), new Action<Connection>(this.detach_Connections1));
			this._Wishlists = new EntitySet<Wishlist>(new Action<Wishlist>(this.attach_Wishlists), new Action<Wishlist>(this.detach_Wishlists));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._ShoppingTransactions = new EntitySet<ShoppingTransaction>(new Action<ShoppingTransaction>(this.attach_ShoppingTransactions), new Action<ShoppingTransaction>(this.detach_ShoppingTransactions));
			this._ShoppingTransactions1 = new EntitySet<ShoppingTransaction>(new Action<ShoppingTransaction>(this.attach_ShoppingTransactions1), new Action<ShoppingTransaction>(this.detach_ShoppingTransactions1));
			this._ScrapBooks = new EntitySet<ScrapBook>(new Action<ScrapBook>(this.attach_ScrapBooks), new Action<ScrapBook>(this.detach_ScrapBooks));
			this._ScrapBooks1 = new EntitySet<ScrapBook>(new Action<ScrapBook>(this.attach_ScrapBooks1), new Action<ScrapBook>(this.detach_ScrapBooks1));
			this._OnlineUsers = new EntitySet<OnlineUser>(new Action<OnlineUser>(this.attach_OnlineUsers), new Action<OnlineUser>(this.detach_OnlineUsers));
			OnCreated();
		}
		
		[Column(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="NVarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_EmailID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EmailID
		{
			get
			{
				return this._EmailID;
			}
			set
			{
				if ((this._EmailID != value))
				{
					this.OnEmailIDChanging(value);
					this.SendPropertyChanging();
					this._EmailID = value;
					this.SendPropertyChanged("EmailID");
					this.OnEmailIDChanged();
				}
			}
		}
		
		[Column(Storage="_DOB", DbType="DateTime NOT NULL")]
		public System.DateTime DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[Column(Storage="_Sex", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[Column(Storage="_Credits", DbType="Float")]
		public System.Nullable<double> Credits
		{
			get
			{
				return this._Credits;
			}
			set
			{
				if ((this._Credits != value))
				{
					this.OnCreditsChanging(value);
					this.SendPropertyChanging();
					this._Credits = value;
					this.SendPropertyChanged("Credits");
					this.OnCreditsChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(256)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="NVarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="NVarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Storage="_Zipcode", DbType="NVarChar(10)")]
		public string Zipcode
		{
			get
			{
				return this._Zipcode;
			}
			set
			{
				if ((this._Zipcode != value))
				{
					this.OnZipcodeChanging(value);
					this.SendPropertyChanging();
					this._Zipcode = value;
					this.SendPropertyChanged("Zipcode");
					this.OnZipcodeChanged();
				}
			}
		}
		
		[Column(Storage="_ContactNo", DbType="NVarChar(50)")]
		public string ContactNo
		{
			get
			{
				return this._ContactNo;
			}
			set
			{
				if ((this._ContactNo != value))
				{
					this.OnContactNoChanging(value);
					this.SendPropertyChanging();
					this._ContactNo = value;
					this.SendPropertyChanged("ContactNo");
					this.OnContactNoChanged();
				}
			}
		}
		
		[Association(Name="User_Connection", Storage="_Connections", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Connection> Connections
		{
			get
			{
				return this._Connections;
			}
			set
			{
				this._Connections.Assign(value);
			}
		}
		
		[Association(Name="User_Connection1", Storage="_Connections1", ThisKey="UserID", OtherKey="FID")]
		public EntitySet<Connection> Connections1
		{
			get
			{
				return this._Connections1;
			}
			set
			{
				this._Connections1.Assign(value);
			}
		}
		
		[Association(Name="User_Wishlist", Storage="_Wishlists", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Wishlist> Wishlists
		{
			get
			{
				return this._Wishlists;
			}
			set
			{
				this._Wishlists.Assign(value);
			}
		}
		
		[Association(Name="User_Event", Storage="_Events", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[Association(Name="User_ShoppingTransaction", Storage="_ShoppingTransactions", ThisKey="UserID", OtherKey="FromID")]
		public EntitySet<ShoppingTransaction> ShoppingTransactions
		{
			get
			{
				return this._ShoppingTransactions;
			}
			set
			{
				this._ShoppingTransactions.Assign(value);
			}
		}
		
		[Association(Name="User_ShoppingTransaction1", Storage="_ShoppingTransactions1", ThisKey="UserID", OtherKey="ToID")]
		public EntitySet<ShoppingTransaction> ShoppingTransactions1
		{
			get
			{
				return this._ShoppingTransactions1;
			}
			set
			{
				this._ShoppingTransactions1.Assign(value);
			}
		}
		
		[Association(Name="User_ScrapBook", Storage="_ScrapBooks", ThisKey="UserID", OtherKey="FromID")]
		public EntitySet<ScrapBook> ScrapBooks
		{
			get
			{
				return this._ScrapBooks;
			}
			set
			{
				this._ScrapBooks.Assign(value);
			}
		}
		
		[Association(Name="User_ScrapBook1", Storage="_ScrapBooks1", ThisKey="UserID", OtherKey="ToID")]
		public EntitySet<ScrapBook> ScrapBooks1
		{
			get
			{
				return this._ScrapBooks1;
			}
			set
			{
				this._ScrapBooks1.Assign(value);
			}
		}
		
		[Association(Name="User_OnlineUser", Storage="_OnlineUsers", ThisKey="UserID", OtherKey="UID")]
		public EntitySet<OnlineUser> OnlineUsers
		{
			get
			{
				return this._OnlineUsers;
			}
			set
			{
				this._OnlineUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Connections(Connection entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_Connections(Connection entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_Connections1(Connection entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Connections1(Connection entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Wishlists(Wishlist entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Wishlists(Wishlist entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ShoppingTransactions(ShoppingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ShoppingTransactions(ShoppingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ShoppingTransactions1(ShoppingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_ShoppingTransactions1(ShoppingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_ScrapBooks(ScrapBook entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ScrapBooks(ScrapBook entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ScrapBooks1(ScrapBook entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_ScrapBooks1(ScrapBook entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_OnlineUsers(OnlineUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_OnlineUsers(OnlineUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.ShoppingItems")]
	public partial class ShoppingItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ItemID;
		
		private long _CategoryID;
		
		private long _SubCategoryID;
		
		private string _ItemName;
		
		private double _ItemPrice;
		
		private string _ItemInfo;
		
		private string _Image;
		
		private EntitySet<ShoppingTransaction> _ShoppingTransactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIDChanging(long value);
    partial void OnItemIDChanged();
    partial void OnCategoryIDChanging(long value);
    partial void OnCategoryIDChanged();
    partial void OnSubCategoryIDChanging(long value);
    partial void OnSubCategoryIDChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnItemPriceChanging(double value);
    partial void OnItemPriceChanged();
    partial void OnItemInfoChanging(string value);
    partial void OnItemInfoChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
		
		public ShoppingItem()
		{
			this._ShoppingTransactions = new EntitySet<ShoppingTransaction>(new Action<ShoppingTransaction>(this.attach_ShoppingTransactions), new Action<ShoppingTransaction>(this.detach_ShoppingTransactions));
			OnCreated();
		}
		
		[Column(Storage="_ItemID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryID", DbType="BigInt NOT NULL")]
		public long CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubCategoryID", DbType="BigInt NOT NULL")]
		public long SubCategoryID
		{
			get
			{
				return this._SubCategoryID;
			}
			set
			{
				if ((this._SubCategoryID != value))
				{
					this.OnSubCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryID = value;
					this.SendPropertyChanged("SubCategoryID");
					this.OnSubCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[Column(Storage="_ItemPrice", DbType="Float NOT NULL")]
		public double ItemPrice
		{
			get
			{
				return this._ItemPrice;
			}
			set
			{
				if ((this._ItemPrice != value))
				{
					this.OnItemPriceChanging(value);
					this.SendPropertyChanging();
					this._ItemPrice = value;
					this.SendPropertyChanged("ItemPrice");
					this.OnItemPriceChanged();
				}
			}
		}
		
		[Column(Storage="_ItemInfo", DbType="NVarChar(256)")]
		public string ItemInfo
		{
			get
			{
				return this._ItemInfo;
			}
			set
			{
				if ((this._ItemInfo != value))
				{
					this.OnItemInfoChanging(value);
					this.SendPropertyChanging();
					this._ItemInfo = value;
					this.SendPropertyChanged("ItemInfo");
					this.OnItemInfoChanged();
				}
			}
		}
		
		[Column(Storage="_Image", DbType="NVarChar(256)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[Association(Name="ShoppingItem_ShoppingTransaction", Storage="_ShoppingTransactions", ThisKey="ItemID", OtherKey="ItemID")]
		public EntitySet<ShoppingTransaction> ShoppingTransactions
		{
			get
			{
				return this._ShoppingTransactions;
			}
			set
			{
				this._ShoppingTransactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShoppingTransactions(ShoppingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.ShoppingItem = this;
		}
		
		private void detach_ShoppingTransactions(ShoppingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.ShoppingItem = null;
		}
	}
	
	[Table(Name="dbo.ShoppingTransactions")]
	public partial class ShoppingTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ShoppingID;
		
		private long _FromID;
		
		private long _ToID;
		
		private long _ItemID;
		
		private double _ItemCredits;
		
		private System.DateTime _Timestamp;
		
		private string _ShippingAddress;
		
		private EntityRef<ShoppingItem> _ShoppingItem;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShoppingIDChanging(long value);
    partial void OnShoppingIDChanged();
    partial void OnFromIDChanging(long value);
    partial void OnFromIDChanged();
    partial void OnToIDChanging(long value);
    partial void OnToIDChanged();
    partial void OnItemIDChanging(long value);
    partial void OnItemIDChanged();
    partial void OnItemCreditsChanging(double value);
    partial void OnItemCreditsChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnShippingAddressChanging(string value);
    partial void OnShippingAddressChanged();
    #endregion
		
		public ShoppingTransaction()
		{
			this._ShoppingItem = default(EntityRef<ShoppingItem>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ShoppingID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ShoppingID
		{
			get
			{
				return this._ShoppingID;
			}
			set
			{
				if ((this._ShoppingID != value))
				{
					this.OnShoppingIDChanging(value);
					this.SendPropertyChanging();
					this._ShoppingID = value;
					this.SendPropertyChanged("ShoppingID");
					this.OnShoppingIDChanged();
				}
			}
		}
		
		[Column(Storage="_FromID", DbType="BigInt NOT NULL")]
		public long FromID
		{
			get
			{
				return this._FromID;
			}
			set
			{
				if ((this._FromID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromIDChanging(value);
					this.SendPropertyChanging();
					this._FromID = value;
					this.SendPropertyChanged("FromID");
					this.OnFromIDChanged();
				}
			}
		}
		
		[Column(Storage="_ToID", DbType="BigInt NOT NULL")]
		public long ToID
		{
			get
			{
				return this._ToID;
			}
			set
			{
				if ((this._ToID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToIDChanging(value);
					this.SendPropertyChanging();
					this._ToID = value;
					this.SendPropertyChanged("ToID");
					this.OnToIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemID", DbType="BigInt NOT NULL")]
		public long ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._ShoppingItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemCredits", DbType="Float NOT NULL")]
		public double ItemCredits
		{
			get
			{
				return this._ItemCredits;
			}
			set
			{
				if ((this._ItemCredits != value))
				{
					this.OnItemCreditsChanging(value);
					this.SendPropertyChanging();
					this._ItemCredits = value;
					this.SendPropertyChanged("ItemCredits");
					this.OnItemCreditsChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingAddress", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string ShippingAddress
		{
			get
			{
				return this._ShippingAddress;
			}
			set
			{
				if ((this._ShippingAddress != value))
				{
					this.OnShippingAddressChanging(value);
					this.SendPropertyChanging();
					this._ShippingAddress = value;
					this.SendPropertyChanged("ShippingAddress");
					this.OnShippingAddressChanged();
				}
			}
		}
		
		[Association(Name="ShoppingItem_ShoppingTransaction", Storage="_ShoppingItem", ThisKey="ItemID", OtherKey="ItemID", IsForeignKey=true)]
		public ShoppingItem ShoppingItem
		{
			get
			{
				return this._ShoppingItem.Entity;
			}
			set
			{
				ShoppingItem previousValue = this._ShoppingItem.Entity;
				if (((previousValue != value) 
							|| (this._ShoppingItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShoppingItem.Entity = null;
						previousValue.ShoppingTransactions.Remove(this);
					}
					this._ShoppingItem.Entity = value;
					if ((value != null))
					{
						value.ShoppingTransactions.Add(this);
						this._ItemID = value.ItemID;
					}
					else
					{
						this._ItemID = default(long);
					}
					this.SendPropertyChanged("ShoppingItem");
				}
			}
		}
		
		[Association(Name="User_ShoppingTransaction", Storage="_User", ThisKey="FromID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ShoppingTransactions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ShoppingTransactions.Add(this);
						this._FromID = value.UserID;
					}
					else
					{
						this._FromID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="User_ShoppingTransaction1", Storage="_User1", ThisKey="ToID", OtherKey="UserID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.ShoppingTransactions1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.ShoppingTransactions1.Add(this);
						this._ToID = value.UserID;
					}
					else
					{
						this._ToID = default(long);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ScrapBook")]
	public partial class ScrapBook : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ScapID;
		
		private long _FromID;
		
		private long _ToID;
		
		private string _Scrap;
		
		private System.DateTime _Timestamp;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScapIDChanging(long value);
    partial void OnScapIDChanged();
    partial void OnFromIDChanging(long value);
    partial void OnFromIDChanged();
    partial void OnToIDChanging(long value);
    partial void OnToIDChanged();
    partial void OnScrapChanging(string value);
    partial void OnScrapChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    #endregion
		
		public ScrapBook()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ScapID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ScapID
		{
			get
			{
				return this._ScapID;
			}
			set
			{
				if ((this._ScapID != value))
				{
					this.OnScapIDChanging(value);
					this.SendPropertyChanging();
					this._ScapID = value;
					this.SendPropertyChanged("ScapID");
					this.OnScapIDChanged();
				}
			}
		}
		
		[Column(Storage="_FromID", DbType="BigInt NOT NULL")]
		public long FromID
		{
			get
			{
				return this._FromID;
			}
			set
			{
				if ((this._FromID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromIDChanging(value);
					this.SendPropertyChanging();
					this._FromID = value;
					this.SendPropertyChanged("FromID");
					this.OnFromIDChanged();
				}
			}
		}
		
		[Column(Storage="_ToID", DbType="BigInt NOT NULL")]
		public long ToID
		{
			get
			{
				return this._ToID;
			}
			set
			{
				if ((this._ToID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToIDChanging(value);
					this.SendPropertyChanging();
					this._ToID = value;
					this.SendPropertyChanged("ToID");
					this.OnToIDChanged();
				}
			}
		}
		
		[Column(Storage="_Scrap", DbType="NVarChar(1024)")]
		public string Scrap
		{
			get
			{
				return this._Scrap;
			}
			set
			{
				if ((this._Scrap != value))
				{
					this.OnScrapChanging(value);
					this.SendPropertyChanging();
					this._Scrap = value;
					this.SendPropertyChanged("Scrap");
					this.OnScrapChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Association(Name="User_ScrapBook", Storage="_User", ThisKey="FromID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ScrapBooks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ScrapBooks.Add(this);
						this._FromID = value.UserID;
					}
					else
					{
						this._FromID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="User_ScrapBook1", Storage="_User1", ThisKey="ToID", OtherKey="UserID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.ScrapBooks1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.ScrapBooks1.Add(this);
						this._ToID = value.UserID;
					}
					else
					{
						this._ToID = default(long);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OnlineUsers")]
	public partial class OnlineUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OnlineID;
		
		private long _UID;
		
		private System.DateTime _Timestamp;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOnlineIDChanging(long value);
    partial void OnOnlineIDChanged();
    partial void OnUIDChanging(long value);
    partial void OnUIDChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    #endregion
		
		public OnlineUser()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_OnlineID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OnlineID
		{
			get
			{
				return this._OnlineID;
			}
			set
			{
				if ((this._OnlineID != value))
				{
					this.OnOnlineIDChanging(value);
					this.SendPropertyChanging();
					this._OnlineID = value;
					this.SendPropertyChanged("OnlineID");
					this.OnOnlineIDChanged();
				}
			}
		}
		
		[Column(Storage="_UID", DbType="BigInt NOT NULL")]
		public long UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[Association(Name="User_OnlineUser", Storage="_User", ThisKey="UID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.OnlineUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.OnlineUsers.Add(this);
						this._UID = value.UserID;
					}
					else
					{
						this._UID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
